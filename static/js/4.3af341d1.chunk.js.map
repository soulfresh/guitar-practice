{"version":3,"sources":["store/routes.js","pages/home/Home.jsx","util/array.js","pages/not-found/NotFound.jsx","pages/main/Main.jsx"],"names":["Routes","Map","path","getRoute","name","parameters","route","get","console","error","r","Object","keys","forEach","key","replace","generateShuffledNotes","includeSharps","previous","a","shuffled","j","x","i","slice","length","Math","floor","random","shuffle","notes","noteNames","newNotes","filter","item","shift","Home","tuning","speed","setTuning","setSpeed","useSharps","setUseSharps","currentStrings","setCurrentStrings","fretCount","round","notesInAnOctive","useReducer","state","newState","index","shuffledNotes","timer","setState","note","nextNote","useEffect","t","requestTimeout","clear","className","onClick","selected","onChange","notesToShow","stringsToShow","min","max","value","s","Connected","dispatch","useDispatch","preferencesInitialized","useSelector","selectPreferencesInitialized","preferences","selectPreferences","standardTuning","nextProps","setPreference","sharps","map","n","strings","getPreferences","NotFound","title","store","_authFailure","handleAuthFailure","setTimeout","Main","onAuthFailure","history","createStore","fallback","component","exact"],"mappings":"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","file":"static/js/4.3af341d1.chunk.js","sourcesContent":["\n/*\n * A Map of route names to `Route` objects.\n *\n * @typedef {Object} Route\n * @property {string} path - The path with replacement variables.\n *\n * @const {Map} Routes\n */\nexport const Routes = new Map([\n  [ 'HOME'          , {path: '/'}],\n  [ 'LOGIN'         , {path: '/login'}],\n]);\n\n/*\n * Get the URL for a specific route with path parameters\n * replaced.\n *\n * @param {string} name - The name of the route (key) in the Routes map.\n * @param {Object} [parameters] - An object with the parameters to replace.\n *   Each key in the parameter should match a variable token in the route\n *   (without the leading ':'). If parameters is not passed, the raw\n *   path is returned.\n *\n *   Ex: {fooId: 123} will replace the foo id token in the route\n *   `/foo/:fooId/new` with the value 123.\n *\n * @return {string} The url that can be used to route to a specific page.\n */\nexport function getRoute(name, parameters) {\n  const route = Routes.get(name);\n  if (!route) {\n    console.error('Could not find route called', name);\n    return '#';\n  }\n\n  let r = route.path;\n  if (parameters) {\n    Object.keys(parameters).forEach((key) => r = r.replace(`:${key}`, parameters[key]));\n  }\n  return r;\n}\n\n/*\n * Get a parameter from the react-router `match`\n * object, doing any necessary casting.\n */\nexport function getRouteParam(name, match) {\n  // Allow passing either the `match` object or\n  // the `match.params` object.\n  const params = match.params ? match.params : match;\n\n  switch(name) {\n    case 'fooId':\n      return Number(params[name]);\n    default:\n      return params[name];\n  }\n}\n\n","import React, {useEffect, useReducer} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport requestTimeout from 'nk-request-timeout';\n\nimport {\n  GuitarNeck,\n  StringSelect,\n  Slider,\n  Checkbox,\n} from '~components';\nimport {\n  shuffle,\n  removeConsecutiveMatches,\n} from '~util/array';\n\nimport {\n  notes,\n  // fourOctives,\n  noteNames,\n  notesInAnOctive,\n  // noteIndex,\n  // noteAtIndex,\n  // majorTriad,\n  standardTuning,\n  // fretsForTuning,\n  // chordDefinition,\n  // chordFretIndexes,\n  // addOctives,\n  selectPreferencesInitialized,\n  selectPreferences,\n  getPreferences,\n  setPreference,\n} from '~store';\n\nimport './Home.scss';\n\nfunction generateShuffledNotes(includeSharps, previous) {\n  const shuffled = shuffle( includeSharps ? notes : noteNames );\n  const newNotes = removeConsecutiveMatches(shuffled);\n\n  // If the first note of the new list matches the\n  // last note of the old list, remove the first note\n  // from the new list so we don't get the same letter twice.\n  if (previous && newNotes[0] === previous[previous.length - 1]) {\n    newNotes.shift();\n  }\n\n  // TODO Handle the case that we now have a the same note twice\n  // due to removing the first note.\n\n  return newNotes;\n}\n\nexport function Home({\n  tuning,\n  setTuning,\n  speed,\n  setSpeed,\n  useSharps,\n  setUseSharps,\n  currentStrings,\n  setCurrentStrings,\n}) {\n  const fretCount = Math.round(notesInAnOctive * 1.5);\n\n  const [{index, shuffledNotes, timer}, setState] = useReducer(\n    (state, newState) => ({...state, ...newState}),\n    {},\n    () => ({\n      index: 0,\n      shuffledNotes: generateShuffledNotes(useSharps),\n      timer: null,\n    })\n  );\n  const note = shuffledNotes[index];\n\n  const nextNote = (timer) => {\n    if (index >= shuffledNotes.length - 1) {\n      setState({\n        index: 0,\n        shuffledNotes: generateShuffledNotes(useSharps, shuffledNotes),\n        timer,\n      });\n    } else {\n      setState({\n        index: index + 1,\n        timer\n      });\n    }\n  };\n\n  const changeSpeed = (s) => {\n    setSpeed(s);\n    if (timer) requestTimeout.clear(timer);\n    setState({timer: null});\n  };\n\n  const changeSharps = () => {\n    setUseSharps(!useSharps);\n    if (timer) requestTimeout.clear(timer);\n    setState({\n      timer: null,\n      shuffledNotes: generateShuffledNotes(!useSharps, shuffledNotes)\n    });\n  };\n\n  useEffect(() => {\n    const t = requestTimeout(speed * 1000, () => {\n      nextNote(t);\n    });\n    return () => {\n      requestTimeout.clear(t);\n    };\n  });\n\n  // const string = Math.round(Math.random() * 3);\n  // let grouped = chordDefinition(majorTriad(note), string, 0, tuning);\n  // const indexes = chordFretIndexes(tuning, grouped);\n  // const maxFret = Math.max.apply(Math, indexes);\n  //\n  // // See if we can add any additional octives.\n  // if (maxFret + notesInAnOctive < fretCount) {\n  //   grouped = addOctives([grouped], maxFret, fretCount);\n  // }\n\n  return (\n    <div className=\"home\">\n      <div className=\"big-note\" onClick={nextNote}>{ note }</div>\n      <div className=\"guitar-display\">\n        <StringSelect\n          tuning={tuning}\n          selected={currentStrings}\n          onChange={setCurrentStrings}\n        />\n        <GuitarNeck\n          tuning={tuning}\n          fretCount={fretCount}\n          notesToShow={note}\n          stringsToShow={currentStrings}\n        />\n      </div>\n      <div className=\"controls\">\n        <label>Speed\n          <Slider\n            min={1}\n            max={30}\n            value={speed}\n            onChange={changeSpeed}\n          />\n        </label>\n        <label>Include Sharps\n          <Checkbox value={useSharps} onChange={changeSharps} />\n        </label>\n      </div>\n    </div>\n  );\n}\n\nHome.propTypes = {\n}\n\nexport default function Connected() {\n  const dispatch = useDispatch();\n  const preferencesInitialized = useSelector(selectPreferencesInitialized);\n  const preferences = useSelector(selectPreferences);\n\n  if (preferencesInitialized) {\n    const tuning = preferences.tuning || standardTuning;\n    const nextProps = {\n      tuning,\n      setTuning: (tuning) => dispatch(setPreference('tuning', tuning)),\n      speed: preferences.speed || 3,\n      setSpeed: (speed) => dispatch(setPreference('speed', speed)),\n      useSharps: !!preferences.useSharps,\n      setUseSharps: (sharps) => dispatch(setPreference('useSharps', sharps)),\n      currentStrings: preferences.currentStrings || tuning.map((n, i) => i),\n      setCurrentStrings: (strings) => dispatch(setPreference('currentStrings', strings)),\n    };\n\n    return <Home {...nextProps} />\n  } else {\n    dispatch(getPreferences());\n    // TODO show loader\n    return null;\n  }\n}\n\n","\n/**\n * Shuffles array in place.\n * @param {Array} a items An array containing the items.\n */\nexport function shuffle(a) {\n  a = a.slice();\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n  return a;\n}\n\n/*\n * Remove consecutive elements from an array.\n * @param {Array} a items An array containing the items.\n */\nexport function removeConsecutiveMatches(a) {\n  return a.filter(function(item, i){\n    // Always keep the 0th element as there is nothing before it\n    // Then check if each element is different than the one before it\n    return i === 0 || item !== a[i-1];\n  });\n}\n","import React from 'react';\n\nimport { NotFound as NotFoundComponent } from '~components';\n\nimport './NotFound.scss';\n\nexport default function NotFound() {\n  return (\n    <div className=\"not-found-page\">\n      <NotFoundComponent title=\"Page Not Found\" />\n    </div>\n  );\n}\n","import React, { Suspense } from 'react';\nimport { Provider } from 'react-redux';\n\nimport {\n  Router,\n  Route,\n  Switch\n} from \"react-router-dom\";\n// import Router from './DebugRouter';\n\nimport createStore from '../../store';\nimport { getRoute } from '../../store/routes';\nimport {\n  PageLoader,\n} from '~components';\nimport {\n  NotFound,\n  Home,\n} from '~pages';\n\nimport './Main.scss';\n\nlet store;\nlet _authFailure;\nlet handleAuthFailure = () => {\n  // Wait until the current render is complete\n  // before re-rendering to the Login page.\n  setTimeout(_authFailure);\n}\n\nexport default function Main({\n  onAuthFailure,\n  history,\n}) {\n  _authFailure = onAuthFailure;\n  if (!store) {\n    store = createStore(handleAuthFailure);\n  }\n\n  return (\n    <div className=\"main\">\n      <Provider store={store}>\n        <Router history={history}>\n          <Suspense fallback={<PageLoader />}>\n            <Switch>\n              <Route component={Home} path={getRoute('HOME')} exact />\n              <Route component={NotFound} />\n            </Switch>\n          </Suspense>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n"],"sourceRoot":""}